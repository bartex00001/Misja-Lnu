Profesor chciałby wiedzieć czy z przystanku `a` można dostać się na przystanek `b`.

Funkcja `check_connection` przyjmuje 3 argumenty:
`przystanek_a`, `przystanek_b` oraz `polaczenia`.

Pierwsze dwa argumenty to numery przystanków.

Trzeci argument jest słownikiem w formacie:
```
{
    ...
    numer_przystanku: [ numery_połączonych_przystanków ]
    ...
}
```
Słownik przechowuje BEZPOŚREDNIE połączenia między przystankami.
Np. Jeżeli przystanek `a` znajduje się na liście `polaczenia[b]`
to znaczy że z przystanku a jest bezpośrednie połączenie z przystankiem b.

Uzupełnij funkcję `check_connection`, by jeżeli jest możliwe (pośrednie lub bezpośrednie) dostanie się z przystanku `a` na przystanek `b` to
funkcja powinna zwrócić `True`, w innym przypadku `False`.



Przykłady: 

Wejście:
`przystanek_a = 1
przystanek_b = 3
polaczenia =
{
    1: [2],
    2: [1, 3],
    3: [2],
}`

Wyjście:
`True`

Z przystanku 1 można pojechać na przystanek 2, z którego można dostać się na przystanek 3



Podpowiedź:
Algorytm powinien rekurencyjnie sprawdzać połączenia każdego kolejnego przystanku, zaczynając od przystanku `a` i zatrzymać
działanie po odnalezieniu przystanka `b` lub odwiedzeniu wszystkich możliwych przystanków. 


Kod startowy:
def check_connection(przystanek_a, przystanek_b, polaczenia):
	return true