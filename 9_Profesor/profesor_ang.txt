Professor would like to know whether there is `a` path from stop a to stop `b`.

Function `check_connection` takes three arguments:
`stop_a`, `stop_b` and `connections`. First two arguments describe stop ids.
Third argument is a dictionary:
```
{
	…
	stop_id: [ ids_of_connected_stops ]
	…
}
```

Dictionary stores only direct connections. This means that if stop `a` can be found in `connections[b]` direct connection exists.
You are to finish `check_connection` function, so it returns `True` if there is a direct or indirect connection from `stop_a` to `stop_b`.
Otherwise, the function should return `False`.

Example:
Input:
`stop_a = 1
stop_b = 3

connections =
{
    1: [2],
    2: [1, 3],
    3: [2],
}`

Output:
`True`

The connection exists because from stop 1, you can go to stop 3 via stop 2.


Hint:
Algorithm should recursively visit all available, unvisited stops. Starting from stop `a` and stopping when we reach stop `b` or when we can’t reach any unvisited stops.


Starter code:
def check_connection(przystanek_a, przystanek_b, polaczenia):
	return true



 
